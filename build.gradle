buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'

    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'

group = 'top.ncserver'
version = '1.4.1-1'

java {
    archivesBaseName = 'forge.chatImg1.19.2'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}
configurations {
    compileClasspath.extendsFrom(shadow)
    runtimeClasspath.extendsFrom(shadow)
}
minecraft {
    mappings channel: 'parchment', version: "2022.11.27-1.19.2"
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'chatimg'
            mods {
                chatimg {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'chatimg'

            mods {
                chatimg {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
            args '--mod', 'chatimg', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                chatimg {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "chatimg.refmap.json"

    config "chatimg.mixins.json"
    debug.verbose = true
    debug.export = true
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.2.0'


    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}
shadowJar {
    configurations = [project.configurations.shadow]
    archiveClassifier.set('')
    dependencies {
        // include(dependency('net.coobird:thumbnailator:0.4.19'))

    }
}
// Example for how to get properties into the manifest for reading at runtime.
jar {

    archiveFileName = "forge.chatimg-1.19.2-" + version + ".jar"
    manifest {
        attributes([
                "Specification-Title"     : "chatimg",
                "Specification-Vendor"    : "MakesYT",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "MakesYT",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

reobf {
    shadowJar {}
}

tasks.build.dependsOn shadowJar
tasks.build.dependsOn reobfShadowJar
jar.finalizedBy('reobfJar')